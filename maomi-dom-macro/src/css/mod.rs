use once_cell::sync::Lazy;
use quote::{quote, TokenStreamExt};
use std::cell::Cell;
use std::fs::File;
use std::hash::Hasher;
use std::io::Write;
use std::path::PathBuf;

use maomi_skin::write_css::{CssWriter, WriteCss};
use maomi_skin::css_token::*;
use maomi_skin::style_sheet::*;
use maomi_skin::{ParseError, pseudo};

mod media_cond;
use media_cond::*;
mod property;
use property::*;

const CLASS_CHARS: [char; 63] = [
    '_', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f', 'g',
    'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z',
    'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S',
    'T', 'U', 'V', 'W', 'X', 'Y', 'Z',
];
const CLASS_START_CHARS: [char; 52] = [
    'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's',
    't', 'u', 'v', 'w', 'x', 'y', 'z', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L',
    'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z',
];

thread_local! {
    static CARGO_PKG_NAME: String = {
        std::env::var("CARGO_PKG_NAME").unwrap_or_default()
    };
    static CSS_OUT_DIR: Option<PathBuf> = {
        std::env::var("MAOMI_CSS_OUT_DIR").ok().map(|x| {
            let p = PathBuf::from(x);
            std::fs::create_dir_all(&p).unwrap();
            p
        })
    };
    static CSS_OUT_MODE: Cell<CssOutMode>  = {
        match std::env::var("MAOMI_CSS_OUT_MODE").ok().as_ref().map(|x| x.as_str()) {
            Some("debug") => Cell::new(CssOutMode::Debug),
            _ => Cell::new(CssOutMode::Release),
        }
    };
}

static CSS_OUT_FILE: Lazy<Option<std::sync::Mutex<File>>> = Lazy::new(|| {
    CSS_OUT_DIR.with(|dir| {
        dir.clone().map(|mut dir| {
            let file_name = std::env::var("CARGO_PKG_NAME")
                .unwrap_or("index".into())
                .replace('-', "_")
                + ".css";
            dir.push(file_name);
            let mut file = std::fs::File::create(&dir).unwrap();
            if CSS_OUT_MODE.with(|x| x.get()) == CssOutMode::Debug {
                file.write(b"/* auto-generated by maomi-dom (debug mode) */\n")
                    .unwrap();
            }
            std::sync::Mutex::new(file)
        })
    })
});

#[derive(Debug, Clone, Copy, PartialEq)]
enum CssOutMode {
    Debug,
    Release,
}

fn generate_span_hash(span: proc_macro2::Span) -> String {
    let mut hasher = std::collections::hash_map::DefaultHasher::new();
    CARGO_PKG_NAME.with(|x| {
        hasher.write(x.as_bytes());
    });
    hasher.write(format!("{:?}", span).as_bytes());
    let mut h = hasher.finish();
    let mut ret = String::with_capacity(16);
    ret.push(CLASS_START_CHARS[(h % CLASS_START_CHARS.len() as u64) as usize]);
    h /= CLASS_START_CHARS.len() as u64;
    while h > 0 {
        ret.push(CLASS_CHARS[(h % CLASS_CHARS.len() as u64) as usize]);
        h /= CLASS_CHARS.len() as u64;
    }
    ret
}

fn generate_css_name(full_ident: &CssIdent, name_mangling: bool, debug_mode: bool) -> String {
    let class_id = generate_span_hash(full_ident.span);
    if !name_mangling {
        full_ident.css_name()
    } else if debug_mode {
        full_ident.css_name() + "_" + &class_id
    } else {
        class_id
    }
}

pub(crate) struct DomStyleSheet {
    name_mangling: bool,
    key_frames_def: Vec<(CssIdent, Vec<(CssPercentage, CssBrace<Repeat<Property<property::DomCssProperty>>>)>)>,
}

impl StyleSheetConstructor for DomStyleSheet {
    type PropertyValue = DomCssProperty;
    type MediaCondValue = DomMediaCondValue;

    fn new() -> Self
    where
        Self: Sized,
    {
        Self {
            name_mangling: true,
            key_frames_def: vec![],
        }
    }

    fn set_config(&mut self, name: &CssIdent, tokens: &mut CssTokenStream) -> Result<(), ParseError> {
        match name.formal_name.as_str() {
            "name_mangling" => {
                let v = tokens.expect_ident()?;
                match v.formal_name.as_str() {
                    "off" => {
                        self.name_mangling = false;
                    }
                    "on" => {
                        self.name_mangling = true;
                    }
                    _ => {
                        return Err(ParseError::new(name.span, "unsupported config value"));
                    }
                }
            }
            _ => {
                return Err(ParseError::new(name.span, "unknown config item"));
            }
        }
        Ok(())
    }

    fn define_key_frames(
        &mut self,
        name: &CssVarRef,
        content: Vec<(CssPercentage, CssBrace<Repeat<Property<property::DomCssProperty>>>)>,
    ) -> Result<Vec<CssToken>, ParseError> {
        let debug_mode = CSS_OUT_MODE.with(|x| x.get() == CssOutMode::Debug);
        let formal_name = generate_css_name(&name.ident, self.name_mangling, debug_mode);
        let generated_ident = CssIdent {
            span: name.ident.span,
            formal_name,
        };
        self.key_frames_def.push((
            generated_ident.clone(),
            content,
        ));
        Ok(vec![CssToken::Ident(generated_ident)])
    }

    fn to_tokens(&self, ss: &StyleSheet<Self>, tokens: &mut proc_macro2::TokenStream)
    where
        Self: Sized,
    {
        let debug_mode = CSS_OUT_MODE.with(|x| x.get() == CssOutMode::Debug);
        let inner_tokens = &mut proc_macro2::TokenStream::new();

        // generate proc macro output for a class
        fn write_proc_macro_class(
            tokens: &mut proc_macro2::TokenStream,
            _span: proc_macro2::Span,
            struct_name: &syn::Ident,
            class_name: &str,
        ) {
            tokens.append_all(quote! {
                #[allow(non_camel_case_types)]
                struct #struct_name {}
                impl maomi::prop::ListPropertyItem<maomi_dom::class_list::DomClassList, bool> for #struct_name {
                    type Value = &'static str;
                    #[inline(always)]
                    fn item_value<'a>(
                        _dest: &mut maomi_dom::class_list::DomClassList,
                        _index: usize,
                        _s: &'a bool,
                        _ctx: &mut <maomi_dom::class_list::DomClassList as maomi::prop::ListPropertyInit>::UpdateContext,
                    ) -> &'a Self::Value {
                        &#class_name
                    }
                }
                impl maomi::prop::ListPropertyItem<maomi_dom::class_list::DomExternalClasses, bool> for #struct_name {
                    type Value = &'static str;
                    #[inline(always)]
                    fn item_value<'a>(
                        _dest: &mut maomi_dom::class_list::DomExternalClasses,
                        _index: usize,
                        _s: &'a bool,
                        _ctx: &mut <maomi_dom::class_list::DomExternalClasses as maomi::prop::ListPropertyInit>::UpdateContext,
                    ) -> &'a Self::Value {
                        &#class_name
                    }
                }
            });
        }

        // generate proc macro output for a definition
        fn write_proc_macro_def(
            _tokens: &mut proc_macro2::TokenStream,
            _span: proc_macro2::Span,
            _name: &syn::Ident,
        ) {
            // Currently, rust-analyzer cannot handle this properly.
            // Just skip for now.
            // tokens.append_all(quote_spanned! {span=>
            //     #[allow(dead_code, non_camel_case_types)]
            //     struct #name();
            // });
        }

        // generate @keyframes output
        if let Some(css_out_file) = CSS_OUT_FILE.as_ref() {
            for (generated_ident, content) in self.key_frames_def.iter() {
                let mut s = String::new();
                let cssw = &mut CssWriter::new(&mut s, debug_mode);
                cssw.write_at_keyword("keyframes").unwrap();
                generated_ident.write_css(cssw).unwrap();
                cssw.write_brace_block(|cssw| {
                    for (p, item) in content.iter() {
                        p.write_css(cssw)?;
                        item.write_css(cssw)?;
                    }
                    Ok(())
                })
                .unwrap();
                css_out_file.lock().unwrap().write(s.as_bytes()).unwrap();
            }
        }

        // generate css output
        for item in ss.items.iter() {
            match item {
                // generate config ref
                StyleSheetItem::ConfigDefinition { .. } => {
                    // empty
                }

                // generate macro def
                StyleSheetItem::MacroDefinition { name, .. } => {
                    write_proc_macro_def(
                        inner_tokens,
                        name.span,
                        &syn::Ident::new(&name.formal_name, name.span),
                    );
                }

                // generate const def and ref
                StyleSheetItem::ConstDefinition { name, .. }
                    | StyleSheetItem::KeyFramesDefinition { name, .. } => {
                    write_proc_macro_def(
                        inner_tokens,
                        name.ident.span,
                        &syn::Ident::new(&name.ident.formal_name, name.ident.span),
                    );
                }

                // generate common rule
                StyleSheetItem::Rule { ident, content, .. } => {
                    // rec to generate all CSS rules
                    fn handle_rule_content(
                        tokens: &mut proc_macro2::TokenStream,
                        name_mangling: bool,
                        debug_mode: bool,
                        full_ident: &CssIdent,
                        content: &RuleContent<DomStyleSheet>,
                        cssw: &mut Option<CssWriter<String>>,
                    ) -> Result<(), std::fmt::Error> {
                        let class_name = generate_css_name(full_ident, name_mangling, debug_mode);

                        // generate proc macro output
                        write_proc_macro_class(
                            tokens,
                            full_ident.span,
                            &syn::Ident::new(&full_ident.formal_name, full_ident.span),
                            &class_name,
                        );

                        // a helper for write css name
                        let write_selector = |cssw: &mut CssWriter<String>| {
                            cssw.write_delim(".", true)?;
                            cssw.write_ident(&class_name, false)?;
                            Ok(())
                        };

                        // a helper for write prop list
                        let write_prop_list =
                            |cssw: &mut CssWriter<String>, props: &[Property<DomCssProperty>]| {
                                for (index, prop) in props.iter().enumerate() {
                                    prop.name.write_css(cssw)?;
                                    prop.colon_token.write_css(cssw)?;
                                    prop.value.write_css(cssw)?;
                                    if debug_mode || index + 1 < content.props.len() {
                                        prop.semi_token.write_css(cssw)?;
                                        if debug_mode {
                                            cssw.line_wrap()?;
                                        }
                                    }
                                }
                                Ok(())
                            };

                        // a helper for write at-blocks
                        let write_main_rule_and_at_blocks =
                            |cssw: &mut CssWriter<String>,
                             pseudo: Option<&pseudo::Pseudo>,
                             props: &[Property<DomCssProperty>],
                             at_blocks: &[AtBlock<DomStyleSheet>]| {
                                if props.len() > 0 {
                                    write_selector(cssw)?;
                                    if let Some(pseudo) = pseudo {
                                        cssw.write_delim(":", false)?;
                                        pseudo.write_css(cssw)?;
                                    }
                                    cssw.write_brace_block(|cssw| write_prop_list(cssw, &props))?;
                                }
                                for block in at_blocks {
                                    let items = match block {
                                        AtBlock::Media {
                                            at_keyword,
                                            expr,
                                            content,
                                        } => {
                                            if content.block.props.len() > 0 {
                                                at_keyword.write_css(cssw)?;
                                                for (index, q) in expr.iter().enumerate() {
                                                    if index > 0 {
                                                        cssw.write_delim(",", false)?;
                                                    }
                                                    q.write_css(cssw)?;
                                                }
                                                Some(&content.block.props)
                                            } else {
                                                None
                                            }
                                        }
                                        AtBlock::Supports {
                                            at_keyword,
                                            expr,
                                            content,
                                        } => {
                                            if content.block.props.len() > 0 {
                                                at_keyword.write_css(cssw)?;
                                                expr.write_css(cssw)?;
                                                Some(&content.block.props)
                                            } else {
                                                None
                                            }
                                        }
                                    };
                                    if let Some(items) = items {
                                        cssw.write_brace_block(|cssw| {
                                            write_selector(cssw)?;
                                            if let Some(pseudo) = pseudo {
                                                cssw.write_delim(":", false)?;
                                                pseudo.write_css(cssw)?;
                                            }
                                            cssw.write_brace_block(|cssw| {
                                                write_prop_list(cssw, items.as_slice())
                                            })?;
                                            Ok(())
                                        })?;
                                    }
                                }
                                Ok(())
                            };

                        // write CSS for the class itself
                        if let Some(cssw) = cssw.as_mut() {
                            write_main_rule_and_at_blocks(
                                cssw,
                                None,
                                &content.props,
                                &content.at_blocks,
                            )?;
                            for c in content.pseudo_classes.iter() {
                                write_main_rule_and_at_blocks(
                                    cssw,
                                    Some(&c.pseudo),
                                    c.content.block.props.as_slice(),
                                    c.content.block.at_blocks.as_slice(),
                                )?;
                            }
                        }

                        Ok(())
                    }

                    // write generated string to file
                    if let Some(css_out_file) = CSS_OUT_FILE.as_ref() {
                        let mut s = String::new();
                        let cssw = CssWriter::new(&mut s, debug_mode);
                        handle_rule_content(
                            tokens,
                            self.name_mangling,
                            debug_mode,
                            ident,
                            &content.block,
                            &mut Some(cssw),
                        )
                        .unwrap();
                        css_out_file.lock().unwrap().write(s.as_bytes()).unwrap();
                    } else {
                        handle_rule_content(
                            tokens,
                            self.name_mangling,
                            debug_mode,
                            ident,
                            &content.block,
                            &mut None,
                        )
                        .unwrap();
                    }
                }
            }
        }

        // write refs
        // Currently, rust-analyzer cannot handle this properly.
        // Just skip for now.
        // fn write_proc_macro_ref(
        //     tokens: &mut proc_macro2::TokenStream,
        //     span: proc_macro2::Span,
        //     name: &syn::Ident,
        // ) {
        //     tokens.append_all(quote_spanned! {span=>
        //         #[allow(dead_code)]
        //         #name();
        //     });
        // }
        // ss.for_each_ref(&mut |r| {
        //     write_proc_macro_ref(
        //         inner_tokens,
        //         r.span,
        //         &syn::Ident::new(&r.formal_name, r.span),
        //     );
        // });

        // write extra tokens
        let fn_name = syn::Ident::new(
            &generate_span_hash(proc_macro2::Span::call_site()),
            proc_macro2::Span::call_site(),
        );
        tokens.append_all(quote! {
            mod fn_name {
                fn #fn_name() {
                    #inner_tokens
                }
            }
        });
    }
}

#[cfg(test)]
mod test {
    use std::io::Seek;
    use std::path::Path;
    use serial_test::serial;

    use super::*;

    pub(crate) struct Env<'a> {
        out_dir: &'a Path,
        import_dir: &'a Path,
    }

    impl<'a> Env<'a> {
        pub(crate) fn write_import_file(&self, name: &str, content: &str) {
            std::fs::write(&self.import_dir.join(name), content).unwrap();
        }

        pub(crate) fn read_output(&self) -> String {
            std::fs::read_to_string(&self.out_dir.join("maomi_dom_macro.css")).unwrap()
        }
    }

    static TEST_DIRS: Lazy<(PathBuf, PathBuf)> = Lazy::new(|| {
        let tmp_path = std::env::temp_dir();
        let out_dir = tmp_path.join("maomi-dom-macro").join("test-out");
        std::fs::create_dir_all(&out_dir).unwrap();
        std::env::set_var("MAOMI_CSS_OUT_DIR", out_dir.to_str().unwrap());
        let import_dir = tmp_path.join("maomi-dom-macro").join("test-import");
        std::fs::create_dir_all(&import_dir).unwrap();
        std::env::set_var("MAOMI_CSS_IMPORT_DIR", import_dir.to_str().unwrap());
        (out_dir, import_dir)
    });

    pub(crate) fn setup_env(debug_mode: bool, f: impl FnOnce(Env)) {
        CSS_OUT_MODE.with(|css_out_mode| {
            css_out_mode.set(match debug_mode {
                false => CssOutMode::Release,
                true => CssOutMode::Debug,
            });
        });
        let (out_dir, import_dir) = &*TEST_DIRS;
        if let Some(css_out_file) = CSS_OUT_FILE.as_ref() {
            let mut file = css_out_file.lock().unwrap();
            file.rewind().unwrap();
            file.set_len(0).unwrap();
        }
        f(Env {
            out_dir,
            import_dir,
        });
    }

    pub(crate) fn parse_str(s: &str) -> String {
        let ss: StyleSheet<DomStyleSheet> = syn::parse_str(s).unwrap();
        quote!(#ss).to_string()
    }

    #[test]
    #[serial]
    fn import() {
        setup_env(false, |env| {
            env.write_import_file(
                "a.css",
                r#"
                    @config name_mangling: off;
                    @macro ma {
                        () => {
                            2.px
                        };
                    }
                    @const $a: 1.px;                
                "#,
            );
            parse_str(
                r#"
                    @import "/a.css";
                    @const $b: $a ma!();
                    .self {
                        padding: $b $a ma!();
                        margin: $b;
                    }
                "#,
            );
            assert_eq!(
                env.read_output(),
                r#".self{padding:1px 2px 1px 2px;margin:1px 2px}"#,
            );
        });
    }

    #[test]
    #[serial]
    fn value_position_macro() {
        setup_env(false, |env| {
            parse_str(
                r#"
                    @config name_mangling: off;
                    @const $ok: 2.px;
                    @macro ma {
                        ($$ $t:tt) => { $ok $t };
                        ($($t:tt),*) => { $($t)* };
                    }
                    @const $p: ma!($$ 1.px);
                    .c {
                        padding: $p;
                        margin: ma!(1.px, 2.px, 3.px);
                    }
                "#,
            );
            assert_eq!(
                env.read_output(),
                r#".c{padding:2px 1px;margin:1px 2px 3px}"#,
            );
        });
    }

    #[test]
    #[serial]
    fn property_position_macro() {
        setup_env(false, |env| {
            parse_str(
                r#"
                    @config name_mangling: off;
                    @macro ma {
                        ($k:ident = $($v:tt)*) => {
                            $k: $($v)*;
                        };
                    }
                    @macro mb {
                        ($($i:value);*) => {
                            $(
                                ma!($i)
                            )*
                        };
                    }
                    .c {
                        ma![padding = 1.px];
                        margin: 2.px;
                        :hover {
                            mb! { padding = 3.px; margin = 4.px }
                        }
                    }
                "#,
            );
            assert_eq!(
                env.read_output(),
                r#".c{padding:1px;margin:2px}.c:hover{padding:3px;margin:4px}"#,
            );
        });
    }

    #[test]
    #[serial]
    fn recursive_macro() {
        setup_env(false, |env| {
            parse_str(
                r#"
                    @config name_mangling: off;
                    @macro ma {
                        ({ $a:value }) => { $a; };
                        ({ $a:value } $($b:tt)*) => { $a; ma!($($b)*) };
                    }
                    .c {
                        ma! {
                            { padding: 1.px }
                            { margin: 2.px }
                        }
                    }
                "#,
            );
            assert_eq!(env.read_output(), r#".c{padding:1px;margin:2px}"#,);
        });
    }

    #[test]
    #[serial]
    fn outer_then_inner_macro_expand() {
        setup_env(false, |env| {
            parse_str(
                r#"
                    @config name_mangling: off;
                    @macro ma {
                        ($a:ident = $b:value) => { $a: 1.px $b; };
                    }
                    @macro mb {
                        ($a: value) => { 2.px $a };
                    }
                    .c {
                        ma!(padding = mb!(3.px));
                    }
                "#,
            );
            assert_eq!(env.read_output(), r#".c{padding:1px 2px 3px}"#,);
        });
    }

    #[test]
    #[serial]
    fn media() {
        setup_env(false, |env| {
            parse_str(
                r#"
                    @config name_mangling: off;
                    .c {
                        padding: 1.px;
                        @media (aspect_ratio: 16/9) {
                            margin: 2.px;
                        }
                    }
                "#,
            );
            assert_eq!(
                env.read_output(),
                r#".c{padding:1px}@media(aspect-ratio:16/9){.c{margin:2px}}"#,
            );
        });
        setup_env(true, |env| {
            parse_str(
                r#"
                    @config name_mangling: off;
                    .c {
                        padding: 1.px;
                        @media (aspect_ratio: 16/9) {
                            margin: 2.px;
                        }
                    }
                "#,
            );
            assert_eq!(
                env.read_output(),
                r#"
.c {
    padding: 1px;
}

@media (aspect-ratio: 16 / 9) {
    .c {
        margin: 2px;
    }
}
"#,
            );
        });
    }

    #[test]
    #[serial]
    fn supports() {
        setup_env(false, |env| {
            parse_str(
                r#"
                    @config name_mangling: off;
                    .c {
                        padding: 1.px;
                        @supports (margin: 2.px) {
                            margin: 2.px;
                        }
                    }
                "#,
            );
            assert_eq!(
                env.read_output(),
                r#".c{padding:1px}@supports(margin:2px){.c{margin:2px}}"#,
            );
        });
        setup_env(false, |env| {
            parse_str(
                r#"
                    @config name_mangling: off;
                    .c {
                        @supports not (margin: 2.px) {
                            padding: 2.px;
                        }
                    }
                "#,
            );
            assert_eq!(
                env.read_output(),
                r#"@supports not (margin:2px){.c{padding:2px}}"#,
            );
        });
        setup_env(false, |env| {
            parse_str(
                r#"
                    @config name_mangling: off;
                    .c {
                        @supports (margin: 2.px) and (margin: 3.px) {
                            margin: 2.px;
                        }
                    }
                "#,
            );
            assert_eq!(
                env.read_output(),
                r#"@supports(margin:2px)and (margin:3px){.c{margin:2px}}"#,
            );
        });
        setup_env(false, |env| {
            parse_str(
                r#"
                    @config name_mangling: off;
                    .c {
                        @supports (margin: 2.px) or (margin: 3.px) {
                            margin: 2.px;
                        }
                    }
                "#,
            );
            assert_eq!(
                env.read_output(),
                r#"@supports(margin:2px)or (margin:3px){.c{margin:2px}}"#,
            );
        });
        setup_env(false, |env| {
            parse_str(
                r#"
                    @config name_mangling: off;
                    .c {
                        @supports (not ((margin: 2.px))) and ((((margin: 3.px)) or (margin: 4.px))) {
                            margin: 2.px;
                        }
                    }
                "#,
            );
            assert_eq!(
                env.read_output(),
                r#"@supports(not (margin:2px))and ((margin:3px)or (margin:4px)){.c{margin:2px}}"#,
            );
        });
        setup_env(false, |_| {
            assert!(syn::parse_str::<StyleSheet<DomStyleSheet>>(
                r#"
                    .c {
                        @supports margin: 2.px {}
                    }
                "#
            )
            .is_err());
        });
        setup_env(false, |_| {
            assert!(syn::parse_str::<StyleSheet<DomStyleSheet>>(
                r#"
                    .c {
                        @supports(margin: 2px) and (margin: 3px) or (margin: 4px) {}
                    }
                "#
            )
            .is_err());
        });
    }

    #[test]
    #[serial]
    fn key_frames() {
        setup_env(false, |env| {
            parse_str(
                r#"
                    @config name_mangling: off;
                    @keyframes $kf {
                        from {
                            transform: translateX(0.px);
                        }
                        50% {
                            transform: translateX(10%);
                        }
                        to {
                            transform: translateX(100%);
                        }
                    }
                    .c {
                        animation-name: $kf;
                    }
                "#,
            );
            assert_eq!(
                env.read_output(),
                r#"@keyframes kf{0%{transform:translateX(0px);}50%{transform:translateX(10%);}100%{transform:translateX(100%);}}.c{animation-name:kf}"#,
            );
        });
        setup_env(true, |env| {
            parse_str(
                r#"
                    @config name_mangling: off;
                    @keyframes $kf {
                        from {
                            transform: translateX(0.px);
                        }
                        50% {
                            transform: translateX(10%);
                        }
                        to {
                            transform: translateX(100%);
                        }
                    }
                    .c {
                        animation-name: $kf;
                    }
                "#,
            );
            assert_eq!(
                env.read_output(),
                r#"
@keyframes kf {
    0% {
        transform: translateX(0px);
    }

    50% {
        transform: translateX(10%);
    }

    100% {
        transform: translateX(100%);
    }
}

.c {
    animation-name: kf;
}
"#,
            );
        });
    }

    #[test]
    #[serial]
    fn pseudo_classes() {
        setup_env(false, |env| {
            parse_str(
                r#"
                    @config name_mangling: off;
                    .c {
                        :hover {
                            @media (aspect-ratio: 16/9) {
                                margin: 2.px;
                            }
                        }
                        padding: 1.px;
                        :active {
                            margin: 3.px;
                        }
                    }
                "#,
            );
            assert_eq!(
                env.read_output(),
                r#".c{padding:1px}@media(aspect-ratio:16/9){.c:hover{margin:2px}}.c:active{margin:3px}"#,
            );
        });
        setup_env(false, |_| {
            assert!(syn::parse_str::<StyleSheet<DomStyleSheet>>(
                r#"
                    .c {
                        :hover {
                            -d {}
                        }
                    }
                "#
            )
            .is_err());
        });
    }
}
